import asyncio
import logging
import random
import aiohttp
from bs4 import BeautifulSoup
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery
import json
from collections import defaultdict
import re
from config import BOT_TOKEN

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
jokes_list = []

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
joke_ratings = defaultdict(lambda: {'likes': 0, 'dislikes': 0})
user_history = defaultdict(list)

# URLs –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
URLS = {
    'litres': "https://www.litres.ru/book/raznoe-47672/samye-smeshnye-anekdoty-23556560/chitat-onlayn/",
    'kartaslov': "https://kartaslov.ru/–∫–Ω–∏–≥–∏/–°–∞–º—ã–µ_—É–±–æ–π–Ω—ã–µ_–∞–Ω–µ–∫–¥–æ—Ç—ã"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
async def save_ratings():
    try:
        with open('joke_ratings.json', 'w', encoding='utf-8') as f:
            json.dump(dict(joke_ratings), f, ensure_ascii=False, indent=2)
        logger.info("–†–µ–π—Ç–∏–Ω–≥–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {str(e)}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤
async def load_ratings():
    try:
        with open('joke_ratings.json', 'r', encoding='utf-8') as f:
            loaded_ratings = json.load(f)
            joke_ratings.update(loaded_ratings)
        logger.info("–†–µ–π—Ç–∏–Ω–≥–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
    except FileNotFoundError:
        logger.info("–§–∞–π–ª —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤: {str(e)}")

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏
def get_main_keyboard():
    keyboard = [
        [
            InlineKeyboardButton(text="üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", callback_data="greeting"),
            InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data="help")
        ],
        [
            InlineKeyboardButton(text="üòÑ –°–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç", callback_data="joke"),
            InlineKeyboardButton(text="üèÜ –¢–æ–ø –∞–Ω–µ–∫–¥–æ—Ç–æ–≤", callback_data="top_jokes")
        ],
        [
            InlineKeyboardButton(text="‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
            InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_rating_keyboard(joke_id):
    keyboard = [
        [
            InlineKeyboardButton(text="üëç", callback_data=f"like_{joke_id}"),
            InlineKeyboardButton(text="üëé", callback_data=f"dislike_{joke_id}")
        ],
        [
            InlineKeyboardButton(text="üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", callback_data="back_to_menu")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

async def parse_kartaslov(session, headers):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ —Å —Å–∞–π—Ç–∞ kartaslov.ru"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ —Å kartaslov.ru")
        async with session.get(URLS['kartaslov']) as response:
            if response.status == 200:
                html = await response.text()
                soup = BeautifulSoup(html, 'html.parser')
                logger.info("HTML —Å kartaslov.ru —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")

                # –ò—â–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –±–ª–æ–∫–∏
                content = soup.get_text()
                
                # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –ø–æ –º–∞—Ä–∫–µ—Ä—É '* * *'
                jokes = re.split(r'\*\s*\*\s*\*', content)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –∏ –æ—á–∏—â–∞–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã
                parsed_jokes = []
                for joke in jokes:
                    joke = joke.strip()
                    if len(joke) > 20 and not any(skip in joke.lower() 
                        for skip in ['–º–µ–Ω—é', '–∫–æ–Ω—Ç–∞–∫—Ç—ã', '–ø–æ–∏—Å–∫', '—á–∏—Ç–∞—Ç—å', '–ø–æ–¥–ø–∏—Å–∫–∞', '–∫–∞—Ç–∞–ª–æ–≥', 
                                   '–∫—É–ø–∏—Ç—å', '—Å–∫–∞—á–∞—Ç—å', '–æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ', '–∞–≤—Ç–æ—Ä:', '–∂–∞–Ω—Ä—ã –∏ —Ç–µ–≥–∏']):
                        parsed_jokes.append(joke)
                
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(parsed_jokes)} –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –Ω–∞ kartaslov.ru")
                return parsed_jokes
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã kartaslov.ru: {response.status}")
                return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ kartaslov.ru: {str(e)}", exc_info=True)
        return []

async def parse_litres(session, headers):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ —Å —Å–∞–π—Ç–∞ litres.ru"""
    try:
        logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ —Å litres.ru")
        async with session.get(URLS['litres']) as response:
            if response.status == 200:
                html = await response.text()
                soup = BeautifulSoup(html, 'html.parser')
                logger.info("HTML —Å litres.ru —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω")
                
                content_elements = soup.find_all(['p', 'img'])
                current_joke = []
                parsed_jokes = []
                
                for element in content_elements:
                    if element.name == 'img':
                        if current_joke:
                            joke_text = '\n'.join(current_joke)
                            if len(joke_text) > 20 and not any(skip in joke_text.lower() 
                                for skip in ['–º–µ–Ω—é', '–∫–æ–Ω—Ç–∞–∫—Ç—ã', '–ø–æ–∏—Å–∫', '—á–∏—Ç–∞—Ç—å', '–ø–æ–¥–ø–∏—Å–∫–∞', '–∫–∞—Ç–∞–ª–æ–≥']):
                                parsed_jokes.append(joke_text)
                            current_joke = []
                    else:
                        text = element.get_text().strip()
                        if text:
                            current_joke.append(text)
                
                if current_joke:
                    joke_text = '\n'.join(current_joke)
                    if len(joke_text) > 20 and not any(skip in joke_text.lower() 
                        for skip in ['–º–µ–Ω—é', '–∫–æ–Ω—Ç–∞–∫—Ç—ã', '–ø–æ–∏—Å–∫', '—á–∏—Ç–∞—Ç—å', '–ø–æ–¥–ø–∏—Å–∫–∞', '–∫–∞—Ç–∞–ª–æ–≥']):
                        parsed_jokes.append(joke_text)
                
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(parsed_jokes)} –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –Ω–∞ litres.ru")
                return parsed_jokes
            else:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã litres.ru: {response.status}")
                return []
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ litres.ru: {str(e)}", exc_info=True)
        return []

async def get_random_joke():
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
    }
    
    try:
        # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –ø—É—Å—Ç, –∑–∞–≥—Ä—É–∂–∞–µ–º –∏—Ö —Å –æ–±–æ–∏—Ö —Å–∞–π—Ç–æ–≤
        if not jokes_list:
            async with aiohttp.ClientSession(headers=headers) as session:
                # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã —Å –æ–±–æ–∏—Ö —Å–∞–π—Ç–æ–≤
                kartaslov_jokes, litres_jokes = await asyncio.gather(
                    parse_kartaslov(session, headers),
                    parse_litres(session, headers)
                )
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞–Ω–µ–∫–¥–æ—Ç—ã –∏–∑ –æ–±–æ–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
                jokes_list.extend(kartaslov_jokes)
                jokes_list.extend(litres_jokes)
                
                logger.info(f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤: {len(jokes_list)}")
                
                if not jokes_list:
                    logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã –Ω–∏ —Å –æ–¥–Ω–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞")
                    return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∞–Ω–µ–∫–¥–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞
        if jokes_list:
            selected_joke = random.choice(jokes_list)
            joke_id = str(hash(selected_joke))
            logger.info(f"–í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –¥–ª–∏–Ω–æ–π {len(selected_joke)} —Å–∏–º–≤–æ–ª–æ–≤")
            return selected_joke, joke_id
        else:
            logger.error("–°–ø–∏—Å–æ–∫ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –ø—É—Å—Ç")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞: {str(e)}", exc_info=True)
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω–µ–∫–¥–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", None

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    await message.answer(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
async def cmd_help(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")
    help_text = """
    –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
    /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
    /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /joke - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç
    
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è:
    üëç/üëé - –û—Ü–µ–Ω–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç
    üèÜ - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
    üìä - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    """
    await message.answer(help_text, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /joke
@dp.message(Command("joke"))
async def cmd_joke(message: Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –∞–Ω–µ–∫–¥–æ—Ç")
    await message.answer("–ü–æ–ª—É—á–∞—é –∞–Ω–µ–∫–¥–æ—Ç...")
    joke, joke_id = await get_random_joke()
    if joke_id:
        user_history[message.from_user.id].append(joke_id)
        await message.answer(joke, reply_markup=get_rating_keyboard(joke_id))
    else:
        await message.answer(joke, reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def process_callback(callback: CallbackQuery):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É {callback.data}")
    
    if callback.data.startswith("like_") or callback.data.startswith("dislike_"):
        joke_id = callback.data.split("_")[1]
        action = "like" if callback.data.startswith("like_") else "dislike"
        
        if action == "like":
            joke_ratings[joke_id]['likes'] += 1
            message = "üëç –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!"
        else:
            joke_ratings[joke_id]['dislikes'] += 1
            message = "üëé –°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É!"
        
        await save_ratings()
        await callback.answer(message)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∞–Ω–µ–∫–¥–æ—Ç
        joke, new_joke_id = await get_random_joke()
        if new_joke_id:
            user_history[callback.from_user.id].append(new_joke_id)
            await callback.message.answer(joke, reply_markup=get_rating_keyboard(new_joke_id))
        return

    if callback.data == "back_to_menu":
        await callback.message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!", reply_markup=get_main_keyboard())
        return

    if callback.data == "top_jokes":
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-5 –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        sorted_jokes = sorted(
            [(joke_id, data['likes'] - data['dislikes']) 
             for joke_id, data in joke_ratings.items()],
            key=lambda x: x[1],
            reverse=True
        )[:5]
        
        if sorted_jokes:
            response = "üèÜ –¢–æ–ø-5 –∞–Ω–µ–∫–¥–æ—Ç–æ–≤ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É:\n\n"
            for i, (joke_id, rating) in enumerate(sorted_jokes, 1):
                for joke in jokes_list:
                    if str(hash(joke)) == joke_id:
                        response += f"{i}. {joke}\n"
                        response += f"–†–µ–π—Ç–∏–Ω–≥: {rating} (üëç {joke_ratings[joke_id]['likes']} | üëé {joke_ratings[joke_id]['dislikes']})\n\n"
                        break
        else:
            response = "–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–µ–Ω–Ω—ã—Ö –∞–Ω–µ–∫–¥–æ—Ç–æ–≤!"
        
        await callback.message.answer(response, reply_markup=get_main_keyboard())
        return

    if callback.data == "stats":
        total_jokes = len(jokes_list)
        total_ratings = sum(len(ratings) for ratings in joke_ratings.values())
        user_rated = len(set(user_id for user_id in user_history.keys()))
        
        stats = (
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n"
            f"–í—Å–µ–≥–æ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤: {total_jokes}\n"
            f"–í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {total_ratings}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ü–µ–Ω–∏–ª–æ: {user_rated}\n"
        )
        await callback.message.answer(stats, reply_markup=get_main_keyboard())
        return

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    if callback.data == "greeting":
        await callback.message.answer("–ü—Ä–∏–≤–µ—Ç! –†–∞–¥ –≤–∞—Å –≤–∏–¥–µ—Ç—å! üëã", reply_markup=get_main_keyboard())
    elif callback.data == "help":
        help_text = """
        –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
        /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
        /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        /joke - –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç
        
        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è:
        üëç/üëé - –û—Ü–µ–Ω–∏—Ç—å –∞–Ω–µ–∫–¥–æ—Ç
        üèÜ - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–æ–ø –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
        üìä - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        """
        await callback.message.answer(help_text, reply_markup=get_main_keyboard())
    elif callback.data == "joke":
        await callback.message.answer("–ü–æ–ª—É—á–∞—é –∞–Ω–µ–∫–¥–æ—Ç...")
        joke, joke_id = await get_random_joke()
        if joke_id:
            user_history[callback.from_user.id].append(joke_id)
            await callback.message.answer(joke, reply_markup=get_rating_keyboard(joke_id))
        else:
            await callback.message.answer(joke, reply_markup=get_main_keyboard())
    elif callback.data == "about":
        await callback.message.answer(
            "ü§ñ –Ø –±–æ—Ç —Å –∞–Ω–µ–∫–¥–æ—Ç–∞–º–∏, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ aiogram.\n"
            "–ú–æ–π –∫–æ–¥ –Ω–∞–ø–∏—Å–∞–Ω –Ω–∞ Python –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
            "–§—É–Ω–∫—Ü–∏–∏:\n"
            "- –°–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã\n"
            "- –°–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–æ–∫\n"
            "- –¢–æ–ø –∞–Ω–µ–∫–¥–æ—Ç–æ–≤\n"
            "- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
            reply_markup=get_main_keyboard()
        )
    
    await callback.answer()

async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    await load_ratings()
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
